[{"title":"webstorm-shortcu-key","slug":null,"date":"2017-02-23T18:02:20.000Z","updated":null,"comments":null,"path":"2017/02/24/webstorm-shortcu-key/","link":null,"permalink":null,"excerpt":null,"keywords":null,"text":"###webstorm快捷键大全 webstorm应该是目前最强的js编辑器了，结合sublime text可以很效率的开发项目。 今天整理了一些webstorm比较实用的快捷键：| 快捷键 | 描述 || :——– | ——–:|| Ctrl+/ 或 Ctrl+Shift+/ | 注释（// 或者/…/ ） || Shift+F6 | 重构-重命名 || Ctrl+X | 剪切一行 || Ctrl+Y | 删除一行 || Ctrl+D | 复制行 || Ctrl+G | 查找行 || Ctrl+Shift+Up/Down| 代码向上/下移动 || F2 或Shift+F2 | 高亮错误或警告快速定位 || 写代码，按Tab | 生成代码 || Ctrl+B或Ctrl+鼠标左键单击|快速打开光标处的类或方法（常用功能） || Ctrl + Alt + B | 跳转方法实现处|| Alt + Up/Down | 跳转到上一个/下一个方法 || Ctrl+E | 最近打开的文件|| Alt+F1 |查找代码所在位置|| Ctrl+Alt+L | 格式化代码 || Ctrl+R | 替换文本 || Ctrl+F | 查找文本 || Ctrl+P | 方法参数提示 || F3 | 查找下一个 || Shift+F3 | 查找上一个 || alt+Shift+F | 将当前文件加入收藏夹 || ctrl+alt+s | 打开配置窗口 || ctrl+Shift+N |通过文件名快速查找工程内的文件（必记）||ctrl+Shift+alt+N | 通过一个字符快速查找位置（必记）||Shift+enter |重新开始一行（无论光标在哪个位置）|| Ctrl + Delete | 删除文字结束||Ctrl + Backspace| 删除文字开始|| Ctrl + Shift + F12 | 切换最大化编辑器| 个人而言用的非常平凡快捷键如下： 123456789Ctrl+/ Ctrl+Shift+/ Ctrl+XCtrl+YCtrl+DCtrl+FCtrl+BCtrl+鼠标左键单击Ctrl+Alt+L","raw":null,"content":null,"categories":null,"tags":[{"name":"webstorm","slug":"webstorm","permalink":"https://bengirl.github.io/tags/webstorm/"}]},{"title":"es6-summary","slug":null,"date":"2017-02-23T17:33:21.000Z","updated":null,"comments":null,"path":"2017/02/24/es6-summary/","link":null,"permalink":null,"excerpt":null,"keywords":null,"text":"es6 归纳总结1、ES6一共有6种声明变量的方法： var命令和function命令，let和const命令，import命令和class命令 2、遍历Map结构 配合变量的解构赋值，获取键名和键值就非常方便。12345678var map = new Map(); map.set(&apos;first&apos;, &apos;hello&apos;); map.set(&apos;second&apos;, &apos;world&apos;); for (let [key, value] of map)&#123; console.log(key + &quot; is &quot; + value); &#125; // first is hello // second is world 如果只想获取键名，或者只想获取键值，可以写成下面这样。12345// 获取键名for (let [key] of map) &#123; // … &#125;// 获取键值for (let [,value] of map) &#123; // ...&#125; 3、数组与对象的解构赋值区别 数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。12345let &#123; bar, foo &#125; = &#123; foo: &quot;aaa&quot;, bar: &quot;bbb&quot; &#125;; foo // &quot;aaa&quot; bar // &quot;bbb&quot; let &#123; baz &#125; = &#123; foo: &quot;aaa&quot;, bar: &quot;bbb&quot; &#125;; baz // undefined 解构赋值的规则是，只要等号右边的值不是对象，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。 4、for-of循环 这是目前遍历数组最简洁和直接的语法； 它避免了for-in的所有缺陷；与forEach()不一样，它支持break，continue和return。for-in循环用于遍历对象属性。for-of循环用于遍历数据——比如数组中单值","raw":null,"content":null,"categories":null,"tags":[{"name":"es6","slug":"es6","permalink":"https://bengirl.github.io/tags/es6/"}]},{"title":"es6-configAndInstall","slug":null,"date":"2017-02-23T17:19:52.000Z","updated":null,"comments":null,"path":"2017/02/24/es6-configAndInstall/","link":null,"permalink":null,"excerpt":null,"keywords":null,"text":"##es6 环境安装与配置1、首先安装node.js的环境。2、npm安装es6转码规则。123456789# ES2015转码规则$ npm install --save-dev babel-preset-es2015# react转码规则$ npm install --save-dev babel-preset-react# ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个$ npm install --save-dev babel-preset-stage-0$ npm install --save-dev babel-preset-stage-1$ npm install --save-dev babel-preset-stage-2$ npm install --save-dev babel-preset-stage-3 3、安装命令行转码babel-cli123456789101112131415$ npm install --save-dev babel-cli# 转码结果输出到标准输出$ babel example.js# 转码结果写入一个文件# --out-file 或 -o 参数指定输出文件$ babel example.js --out-file compiled.js# 或者$ babel example.js -o compiled.js# 整个目录转码# --out-dir 或 -d 参数指定输出目录$ babel src --out-dir lib# 或者$ babel src -d lib# -s 参数生成source map文件$ babel src -d lib -s 4、改写或者新加文件 package.json12345678910111213141516&#123; &quot;description&quot;: &quot;es6 demo&quot;, &quot;author&quot;: &quot;ben&quot;, &quot;license&quot;: &quot;MIT&quot;, &quot;devDependencies&quot;: &#123; &quot;babel-cli&quot;: &quot;^6.22.2&quot;, &quot;babel-preset-es2015&quot;: &quot;^6.22.0&quot;, &quot;babel-preset-react&quot;: &quot;^6.23.0&quot;, &quot;babel-preset-stage-0&quot;: &quot;^6.22.0&quot;, &quot;babel-register&quot;: &quot;^6.23.0&quot;, &quot;es-checker&quot;: &quot;^1.4.0&quot; &#125;, &quot;scripts&quot;: &#123; &quot;build&quot;: &quot;babel src -d lib&quot; &#125;&#125; 转码的时候，就执行下面的命令。$ npm run build 5、项目根目录建立一个.babelrc 文件,里面内容为：12345678&#123; &quot;presets&quot;: [ &quot;es2015&quot;, &quot;react&quot;, &quot;stage-0&quot; ], &quot;plugins&quot;: []&#125; 6、babel-node命令可以直接运行ES6脚本12345$ babel-node es6.js 或者如下：$ babel-node&gt; (x =&gt; x * 2)(1)2","raw":null,"content":null,"categories":null,"tags":[{"name":"es6","slug":"es6","permalink":"https://bengirl.github.io/tags/es6/"}]},{"title":"hexo常用命令","slug":null,"date":"2017-02-19T14:31:24.000Z","updated":null,"comments":null,"path":"2017/02/19/hexo常用命令/","link":null,"permalink":null,"excerpt":null,"keywords":null,"text":"hexo收集整理了一堆命令1234567891011121314$ npm install -g hexo //安装hexo$ npm init //初始化$ npm install // hexo 项目文件下安装依耐$ hexo server //或hexo -s 启动hexo服务[info] Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.$ hexo new &quot;postName&quot; //或者hexo n 新建文章hexo new page &quot;pageName&quot; // 新建页面$ hexo clean // 每次先删除了在生成$ hexo generate //或hexo -g 将 md文件转成静态网页 $ hexo deploy //或hexo -d 发布到github上$ hexo help // 查看帮助$ hexo version // 查看Hexo的版本$ hexo deploy -g // 生成加部署$ hexo server -g // 生成加预览 hexo参考链接http://www.jianshu.com/p/e99ed60390a8http://www.jianshu.com/p/465830080ea9","raw":null,"content":null,"categories":null,"tags":[{"name":"hexo","slug":"hexo","permalink":"https://bengirl.github.io/tags/hexo/"}]},{"title":"hello world","slug":null,"date":"2017-02-17T11:11:51.000Z","updated":null,"comments":null,"path":"2017/02/17/hello-world/","link":null,"permalink":null,"excerpt":null,"keywords":null,"text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","raw":null,"content":null,"categories":null,"tags":[{"name":"hexo","slug":"hexo","permalink":"https://bengirl.github.io/tags/hexo/"}]}]